/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/


// This file was autogenerated by go-to-protobuf. Do not edit it manually!

syntax = 'proto2';

package gitlab.aibee.cn.platform.ai-scheduler.pkg.apis.resource.v1alpha1;

import "k8s.io/apimachinery/pkg/api/resource/generated.proto";
import "k8s.io/apimachinery/pkg/apis/meta/v1/generated.proto";
import "k8s.io/apimachinery/pkg/runtime/generated.proto";
import "k8s.io/apimachinery/pkg/runtime/schema/generated.proto";

// Package-wide variables from generator "generated".
option go_package = "v1alpha1";

// Pool
message Pool {
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  // Spec defines the desired resources divided
  // +optional
  optional PoolSpec spec = 2;

  // Status defines the actual enforced deserved resources and its current usage
  // +optional
  optional PoolStatus status = 3;
}

// Pool is a collection of resource pools.
message PoolList {
  // Standard list metadata
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  // items is the list of Pool
  repeated Pool items = 2;
}

// PoolSpec
message PoolSpec {
  // NodeSelector match node label
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.LabelSelector nodeSelector = 1;

  // DisablePreemption flag whether task can preempt resources in the same pool ,
  // if false, task in pool can preempt resources from other pools
  // if true, task cannot preempt resources from other pools and wait available
  // resource in self pool
  // +optional
  optional bool disablePreemption = 2;

  // DisableBorrowing flag whether task in self pool can borrow resources from other pool,
  // if false, task can borrow resources from other pool
  // if true, task will only can use deserved resources
  // +optional
  optional bool disableBorrowing = 3;

  // BorrowingPools only borrow from those pools,
  // only available when DisableBorrowing is false,
  // if empty can borrow all sharing pools
  // +optional
  repeated string borrowingPools = 4;

  // DisableSharing flag if self pool share its resource to other pool,
  // if false, the pool can be preempted by task in other pool
  // if true, the pool will not be preempted.
  // +optional
  optional bool disableSharing = 5;
}

// PoolStatus
message PoolStatus {
  // Capacity all resources of pool nodes capacity sum
  // +optional
  map<string, k8s.io.apimachinery.pkg.api.resource.Quantity> capacity = 1;

  // Allocatable all quota of pool divided
  // +optional
  map<string, k8s.io.apimachinery.pkg.api.resource.Quantity> allocatable = 2;

  // Requested  is the current observed total usage of the resource by tasks in the Pool
  // Requested = (Deserved + System + Shared)
  // +optional
  map<string, k8s.io.apimachinery.pkg.api.resource.Quantity> requests = 3;

  map<string, k8s.io.apimachinery.pkg.api.resource.Quantity> limits = 4;

  // Deserved is the resource used by self pool task
  // +optional
  map<string, k8s.io.apimachinery.pkg.api.resource.Quantity> deserved = 5;

  // System is the resource used by scheduled by not ai-scheduler, i.e.calico,
  // +optional
  map<string, k8s.io.apimachinery.pkg.api.resource.Quantity> system = 6;

  // shared is the resources that shared to tasks in others Pool
  // +optional
  map<string, k8s.io.apimachinery.pkg.api.resource.Quantity> shared = 7;

  // Borrowed is the resources that task in self Pool borrows from other Pool
  // +optional
  map<string, k8s.io.apimachinery.pkg.api.resource.Quantity> borrowed = 8;

  // Free = (Allocatable - allocated)
  map<string, k8s.io.apimachinery.pkg.api.resource.Quantity> free = 9;
}

